{"ast":null,"code":"import _classCallCheck from \"C:\\\\www\\\\6\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\www\\\\6\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\www\\\\6\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\www\\\\6\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\www\\\\6\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\www\\\\6\\\\src\\\\components\\\\ApiData\\\\ApiData.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport axios from 'axios';\nvar apiendpoint = \"https://www.reddit.com/r/nonbinary.json\";\n\nvar ApiData =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ApiData, _React$Component);\n\n  function ApiData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ApiData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ApiData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      posts: [],\n      isLoading: true,\n      errors: null\n    };\n    return _this;\n  }\n\n  _createClass(ApiData, [{\n    key: \"getPosts\",\n    // Now we're going to make a request for data using axios\n    value: function getPosts() {\n      var _this2 = this;\n\n      axios // This is where the data is hosted\n      .get(\"\") // Once we get a response and store data, let's change the loading state\n      .then(function (response) {\n        _this2.setState({\n          posts: response.data.posts,\n          isLoading: false\n        });\n      }) // If we catch any errors connecting, let's update accordingly\n      [\"catch\"](function (error) {\n        return _this2.setState({\n          error: error,\n          isLoading: false\n        });\n      });\n    } // Let's our ApiData know we're ready to render the data\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getPosts();\n    } // Putting that data to use\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          posts = _this$state.posts;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Random Post\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, !isLoading ? posts.map(function (post) {\n        var _id = post._id,\n            title = post.title,\n            content = post.content;\n        return React.createElement(\"div\", {\n          key: _id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, title), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, content), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }));\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Loading...\")));\n    }\n  }]);\n\n  return ApiData;\n}(React.Component);\n\nexport default function ApiDataCall(props) {\n  return props.ApiData;\n}","map":{"version":3,"sources":["C:/www/6/src/components/ApiData/ApiData.js"],"names":["React","Component","render","axios","apiendpoint","ApiData","state","posts","isLoading","errors","get","then","response","setState","data","error","getPosts","map","post","_id","title","content","ApiDataCall","props"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACI,IAAMC,WAAW,GAAG,yCAApB;;IAEEC,O;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,MAAM,EAAE;AAHF,K;;;;;;AAMR;+BACW;AAAA;;AACTN,MAAAA,KAAK,CACH;AADG,OAEFO,GAFH,CAEO,EAFP,EAGE;AAHF,OAIGC,IAJH,CAIQ,UAAAC,QAAQ,EAAI;AAChB,QAAA,MAAI,CAACC,QAAL,CAAc;AACZN,UAAAA,KAAK,EAAEK,QAAQ,CAACE,IAAT,CAAcP,KADT;AAEZC,UAAAA,SAAS,EAAE;AAFC,SAAd;AAID,OATH,EAUE;AAVF,gBAWS,UAAAO,KAAK;AAAA,eAAI,MAAI,CAACF,QAAL,CAAc;AAAEE,UAAAA,KAAK,EAALA,KAAF;AAASP,UAAAA,SAAS,EAAE;AAApB,SAAd,CAAJ;AAAA,OAXd;AAYD,K,CACD;;;;wCACoB;AAClB,WAAKQ,QAAL;AACD,K,CACD;;;;6BACS;AAAA,wBACsB,KAAKV,KAD3B;AAAA,UACCE,SADD,eACCA,SADD;AAAA,UACYD,KADZ,eACYA,KADZ;AAEP,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACC,SAAD,GACCD,KAAK,CAACU,GAAN,CAAU,UAAAC,IAAI,EAAI;AAAA,YACRC,GADQ,GACgBD,IADhB,CACRC,GADQ;AAAA,YACHC,KADG,GACgBF,IADhB,CACHE,KADG;AAAA,YACIC,OADJ,GACgBH,IADhB,CACIG,OADJ;AAEhB,eACE;AAAK,UAAA,GAAG,EAAEF,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKC,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIC,OAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADF;AAOD,OATD,CADD,GAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAbJ,CAFF,CADF;AAqBD;;;;EAnDiBrB,KAAK,CAACC,S;;AAqD1B,eAAe,SAASqB,WAAT,CAAqBC,KAArB,EAA2B;AACtC,SAAQA,KAAK,CAAClB,OAAd;AACH","sourcesContent":["import React, {Component} from 'react';\r\nimport { render } from 'react-dom';\r\nimport axios from 'axios';\r\n    const apiendpoint = \"https://www.reddit.com/r/nonbinary.json\";\r\n      \r\nclass ApiData extends React.Component {\r\n    // State will ApiDataly to the posts object which is set to loading by default\r\n    state = {\r\n      posts: [],\r\n      isLoading: true,\r\n      errors: null\r\n    };\r\n    \r\n    // Now we're going to make a request for data using axios\r\n    getPosts() {\r\n      axios\r\n        // This is where the data is hosted\r\n        .get(\"\")\r\n        // Once we get a response and store data, let's change the loading state\r\n        .then(response => {\r\n          this.setState({\r\n            posts: response.data.posts,\r\n            isLoading: false\r\n          });\r\n        })\r\n        // If we catch any errors connecting, let's update accordingly\r\n        .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n    // Let's our ApiData know we're ready to render the data\r\n    componentDidMount() {\r\n      this.getPosts();\r\n    }\r\n    // Putting that data to use\r\n    render() {\r\n      const { isLoading, posts } = this.state;\r\n      return (\r\n        <React.Fragment>\r\n          <h2>Random Post</h2>\r\n          <div>\r\n            {!isLoading ? (\r\n              posts.map(post => {\r\n                const { _id, title, content } = post;\r\n                return (\r\n                  <div key={_id}>\r\n                    <h2>{title}</h2>\r\n                    <p>{content}</p>\r\n                    <hr />\r\n                  </div>\r\n                );\r\n              })\r\n            ) : (\r\n              <p>Loading...</p>\r\n            )}\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n  export default function ApiDataCall(props){\r\n      return (props.ApiData);\r\n  }"]},"metadata":{},"sourceType":"module"}